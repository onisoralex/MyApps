//defines a new pattern(:\\; one or more occurances)
//defines a new matcher for the specified string(str)
//the matcher replaces every occurance of the specified pattern
    /*
     Pattern pat2 = Pattern.compile(":\\\\+");
     Matcher mat2 = pat2.matcher(str);
     System.out.println(mat2.replaceAll("!HIER!"));
     */


//outputs the starting position of the match
//outputs the ending position of the match
//
    /*
    System.out.println("Start index: " + mat.start());
    System.out.println("End index: " + mat.end());
    System.out.println(mat.group());
    */

/*RegEx search for the "\" symbol should be "\\" as string,
because "\" is an escape symbol and has to be made with a second one to a literal "\" for java
since RegEx uses the same escape symbol two "\" will be made into one also by RegEx.
so searching for the lieral "\" should be "\\\\" since "\\" -> "\" and that two times. 
one for java and then for regex too*/



Character classes
.               any character except newline
\w \d \s	word, digit, whitespace
\W \D \S	not word, digit, whitespace
[abc]   	any of a, b, or c
[^abc]          not a, b, or c
[a-g]           character between a & g

Anchors
^abc$           start / end of the string
\b              word boundary

Escaped characters
\. \* \\	escaped special characters
\t \n \r	tab, linefeed, carriage return
\u00A9          unicode escaped Â©

Groups & Lookaround
(abc)           capture group
\1              backreference to group #1
(?:abc)         non-capturing group
(?=abc)     	positive lookahead
(?!abc)         negative lookahead

Quantifiers & Alternation
a* a+ a?	0 or more, 1 or more, 0 or 1
a{5} a{2,}	exactly five, two or more
a{1,3}          between one & three
a+? a{2,}?	match as few as possible
ab|cd           match ab or cd



//starting and ending index of the found match
//            System.out.println("Start index: " + mat.start());
//            System.out.println("End index: " + mat.end());

